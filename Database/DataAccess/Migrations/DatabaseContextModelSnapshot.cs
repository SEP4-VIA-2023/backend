// <auto-generated />
using System;
using DataAccess.models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_catalog", "adminpack");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.models.Iotdevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("token");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("iotdevice_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("iotdevice", "sep4");
                });

            modelBuilder.Entity("DataAccess.models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Co2")
                        .HasColumnType("integer")
                        .HasColumnName("co2");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int>("Humidity")
                        .HasColumnType("integer")
                        .HasColumnName("humidity");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("measurement_pkey");

                    b.HasIndex("DeviceId");

                    b.ToTable("measurement", "sep4");
                });

            modelBuilder.Entity("DataAccess.models.Preset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int>("MaxCo2")
                        .HasColumnType("integer")
                        .HasColumnName("max_co2");

                    b.Property<int>("MaxHumidity")
                        .HasColumnType("integer")
                        .HasColumnName("max_humidity");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("integer")
                        .HasColumnName("max_temperature");

                    b.Property<int>("MinCo2")
                        .HasColumnType("integer")
                        .HasColumnName("min_co2");

                    b.Property<int>("MinHumidity")
                        .HasColumnType("integer")
                        .HasColumnName("min_humidity");

                    b.Property<int>("MinTemperature")
                        .HasColumnType("integer")
                        .HasColumnName("min_temperature");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("preset_pkey");

                    b.HasIndex("DeviceId");

                    b.ToTable("preset", "sep4");
                });

            modelBuilder.Entity("DataAccess.models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.ToTable("users", "sep4");
                });

            modelBuilder.Entity("DataAccess.models.Iotdevice", b =>
                {
                    b.HasOne("DataAccess.models.User", "User")
                        .WithMany("Iotdevices")
                        .HasForeignKey("UserId")
                        .HasConstraintName("iotdevice_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.models.Measurement", b =>
                {
                    b.HasOne("DataAccess.models.Iotdevice", "Device")
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("measurement_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DataAccess.models.Preset", b =>
                {
                    b.HasOne("DataAccess.models.Iotdevice", "Device")
                        .WithMany("Presets")
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("preset_device_id_fkey");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DataAccess.models.Iotdevice", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Presets");
                });

            modelBuilder.Entity("DataAccess.models.User", b =>
                {
                    b.Navigation("Iotdevices");
                });
#pragma warning restore 612, 618
        }
    }
}
